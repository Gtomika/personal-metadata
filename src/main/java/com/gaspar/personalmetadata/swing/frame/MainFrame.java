package com.gaspar.personalmetadata.swing.frame;

import com.gaspar.personalmetadata.PersonalMetadataApplication;
import com.gaspar.personalmetadata.config.LoggedInUserConfig;
import com.gaspar.personalmetadata.swing.LoadingPanelView;
import com.gaspar.personalmetadata.swing.ModifyMetadataCardView;
import com.gaspar.personalmetadata.swing.SelectFileCardView;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.nio.file.Path;
import java.util.Locale;
import java.util.Optional;

@Slf4j
@Lazy
@Component
public class MainFrame extends JFrame {

    private JLabel usernameField;
    private JPanel contentPane;
    private JPanel cardPanel;
    private JPanel loadingPanelHolder;

    private MainFrameCardType currentMainFrameCardType;
    private final CardLayout mainFrameCardLayout;

    public MainFrame(
            LoggedInUserConfig loggedInUserConfig,
            SelectFileCardView selectFileCardView,
            ModifyMetadataCardView modifyMetadataCardView,
            LoadingPanelView loadingPanelView
    ) {
        setContentPane(contentPane);
        setTitle("Personal Metadata");

        usernameField.setText(loggedInUserConfig.getUsername());
        selectFileCardView.attachSelectFileCard(cardPanel, MainFrameCardType.SELECT_FILE.name());
        modifyMetadataCardView.attachModifyMetadataCard(cardPanel, MainFrameCardType.MODIFY_METADATA.name());
        mainFrameCardLayout = (CardLayout) cardPanel.getLayout();
        showSelectFileCard();

        loadingPanelView.attachLoadingPanel(loadingPanelHolder, BorderLayout.CENTER);

        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                log.info("The user has closed the main frame");
                dispose();
                PersonalMetadataApplication.shutdown(0);
            }
        });

        setLocationRelativeTo(null);
        pack();
    }

    public void showSelectFileCard() {
        if (currentMainFrameCardType == MainFrameCardType.SELECT_FILE) {
            log.info("Already showing 'my metadata' card");
            return;
        }
        currentMainFrameCardType = MainFrameCardType.SELECT_FILE;
        mainFrameCardLayout.show(cardPanel, MainFrameCardType.SELECT_FILE.name());
        log.info("Showing 'my metadata' card");
    }

    public void showModifyMetadataCard() {
        if (currentMainFrameCardType == MainFrameCardType.MODIFY_METADATA) {
            log.info("Already showing 'modify metadata' card");
            return;
        }
        currentMainFrameCardType = MainFrameCardType.MODIFY_METADATA;
        mainFrameCardLayout.show(cardPanel, MainFrameCardType.MODIFY_METADATA.name());
        log.info("Showing 'modify metadata' card");
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        usernameField = new JLabel();
        Font usernameFieldFont = this.$$$getFont$$$(null, Font.ITALIC, 20, usernameField.getFont());
        if (usernameFieldFont != null) usernameField.setFont(usernameFieldFont);
        usernameField.setText("email");
        panel1.add(usernameField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, Font.BOLD, 20, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Personal Metadata App");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cardPanel = new JPanel();
        cardPanel.setLayout(new CardLayout(0, 0));
        contentPane.add(cardPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        loadingPanelHolder = new JPanel();
        loadingPanelHolder.setLayout(new BorderLayout(0, 0));
        contentPane.add(loadingPanelHolder, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
